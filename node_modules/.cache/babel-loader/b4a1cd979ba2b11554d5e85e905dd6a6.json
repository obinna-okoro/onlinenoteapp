{"ast":null,"code":"var _jsxFileName = \"/home/user/Documents/fbw-07-2/SPA/notetaking-application-obinna/src/routes/Notes/Notes.jsx\",\n    _s = $RefreshSig$();\n\nimport { useContext, useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport MyContext from '../../context/MyContext';\nimport { useParams, useSearchParams } from 'react-router-dom';\nimport Output from '../Output/Output';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Notes = () => {\n  _s();\n\n  const {\n    notes\n  } = useContext(MyContext);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [search, setSearch] = useState(\"\");\n\n  const searcher = () => {\n    setSearchParams({\n      title: search\n    });\n  };\n\n  useEffect(() => {\n    console.log(\"do a search\");\n    console.log(searchParams.get(\"title\"));\n    const searching = searchParams.get(\"title\");\n    const newArr = notes.filter(element => element.title.includes(searching));\n    setNotes(newArr);\n  }, [searchParams]);\n  const {\n    id\n  } = useParams();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"parent\",\n    children: [/*#__PURE__*/_jsxDEV(\"aside\", {\n      className: \"main side\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"search\",\n        name: \"\",\n        id: \"\",\n        value: search,\n        onChange: e => setSearch(e.target.value),\n        placeholder: \"search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 13\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: searcher,\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 131\n      }, this), notes.map((note, i) => {\n        return /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            className: \"link\",\n            to: note.id,\n            children: note.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 33\n          }, this)\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 21\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 11\n    }, this), id && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main display\",\n      children: /*#__PURE__*/_jsxDEV(Output, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Notes, \"QMTTpSACxsEU4P3E4suKQjtUoV8=\", false, function () {\n  return [useSearchParams, useParams];\n});\n\n_c = Notes;\nexport default Notes;\n\nvar _c;\n\n$RefreshReg$(_c, \"Notes\");","map":{"version":3,"sources":["/home/user/Documents/fbw-07-2/SPA/notetaking-application-obinna/src/routes/Notes/Notes.jsx"],"names":["useContext","useState","useEffect","Link","MyContext","useParams","useSearchParams","Output","Notes","notes","searchParams","setSearchParams","search","setSearch","searcher","title","console","log","get","searching","newArr","filter","element","includes","setNotes","id","e","target","value","map","note","i"],"mappings":";;;AAAA,SAAQA,UAAR,EAAoBC,QAApB,EAA8BC,SAA9B,QAA8C,OAA9C;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,SAASC,SAAT,EAAoBC,eAApB,QAA2C,kBAA3C;AACA,OAAOC,MAAP,MAAmB,kBAAnB;;;AAEA,MAAMC,KAAK,GAAG,MAAM;AAAA;;AAEhB,QAAM;AAAEC,IAAAA;AAAF,MAAYT,UAAU,CAACI,SAAD,CAA5B;AAEA,QAAM,CAACM,YAAD,EAAeC,eAAf,IAAkCL,eAAe,EAAvD;AAEA,QAAM,CAACM,MAAD,EAASC,SAAT,IAAsBZ,QAAQ,CAAC,EAAD,CAApC;;AAEA,QAAMa,QAAQ,GAAG,MAAM;AACrBH,IAAAA,eAAe,CAAC;AAACI,MAAAA,KAAK,EAAEH;AAAR,KAAD,CAAf;AACD,GAFD;;AAIAV,EAAAA,SAAS,CAAC,MAAK;AACbc,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYP,YAAY,CAACQ,GAAb,CAAiB,OAAjB,CAAZ;AAEA,UAAMC,SAAS,GAAGT,YAAY,CAACQ,GAAb,CAAiB,OAAjB,CAAlB;AAEA,UAAME,MAAM,GAAGX,KAAK,CAACY,MAAN,CAAaC,OAAO,IAAIA,OAAO,CAACP,KAAR,CAAcQ,QAAd,CAAuBJ,SAAvB,CAAxB,CAAf;AAEAK,IAAAA,QAAQ,CAACJ,MAAD,CAAR;AAED,GAVQ,EAUP,CAACV,YAAD,CAVO,CAAT;AAYA,QAAM;AAACe,IAAAA;AAAD,MAAOpB,SAAS,EAAtB;AAEF,sBACE;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA,4BAEM;AAAO,MAAA,SAAS,EAAC,WAAjB;AAAA,8BACE;AAAO,QAAA,IAAI,EAAC,QAAZ;AAAqB,QAAA,IAAI,EAAC,EAA1B;AAA6B,QAAA,EAAE,EAAC,EAAhC;AAAmC,QAAA,KAAK,EAAEO,MAA1C;AAAkD,QAAA,QAAQ,EAAGc,CAAD,IAAOb,SAAS,CAACa,CAAC,CAACC,MAAF,CAASC,KAAV,CAA5E;AAA8F,QAAA,WAAW,EAAC;AAA1G;AAAA;AAAA;AAAA;AAAA,cADF,oBACwH;AAAQ,QAAA,OAAO,EAAEd,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADxH,EAECL,KAAK,CAACoB,GAAN,CAAU,CAACC,IAAD,EAAOC,CAAP,KACV;AAAE,4BAAO;AAAA,iCAAY,QAAC,IAAD;AAAM,YAAA,SAAS,EAAC,MAAhB;AAAuB,YAAA,EAAE,EAAED,IAAI,CAACL,EAAhC;AAAA,sBAAqCK,IAAI,CAACf;AAA1C;AAAA;AAAA;AAAA;AAAA;AAAZ,WAASgB,CAAT;AAAA;AAAA;AAAA;AAAA,gBAAP;AAAiF,OADnF,CAFD;AAAA;AAAA;AAAA;AAAA;AAAA,YAFN,EASMN,EAAE,iBAAI;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,6BACN,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AADM;AAAA;AAAA;AAAA;AAAA,YATZ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD,CA7CD;;GAAMjB,K;UAIsCF,e,EAoB3BD,S;;;KAxBXG,K;AA+CN,eAAeA,KAAf","sourcesContent":["import {useContext, useState, useEffect} from 'react'\nimport { Link } from 'react-router-dom'\nimport MyContext from '../../context/MyContext'\nimport { useParams, useSearchParams } from 'react-router-dom'\nimport Output from '../Output/Output'\n\nconst Notes = () => {\n\n    const { notes } = useContext(MyContext)\n\n    const [searchParams, setSearchParams] = useSearchParams()\n\n    const [search, setSearch] = useState(\"\")\n\n    const searcher = () => {\n      setSearchParams({title: search})\n    }\n\n    useEffect(()=> {\n      console.log(\"do a search\")\n      console.log(searchParams.get(\"title\"))\n\n      const searching = searchParams.get(\"title\")\n\n      const newArr = notes.filter(element => element.title.includes(searching))\n\n      setNotes(newArr)\n\n    },[searchParams])\n    \n    const {id} = useParams()\n    \n  return (\n    <div className='parent'>\n         \n          <aside className='main side'>\n            <input type=\"search\" name=\"\" id=\"\" value={search} onChange={(e) => setSearch(e.target.value)} placeholder='search' /> <button onClick={searcher}>Search</button>\n          {notes.map((note, i) =>\n           { return <h3 key={i}><Link className='link' to={note.id}>{note.title}</Link></h3> }\n        )}\n          </aside>\n              \n         {id && <div className='main display'>\n          <Output />\n          </div>}\n         \n              \n\n       \n    </div>\n  )\n}\n\nexport default Notes"]},"metadata":{},"sourceType":"module"}