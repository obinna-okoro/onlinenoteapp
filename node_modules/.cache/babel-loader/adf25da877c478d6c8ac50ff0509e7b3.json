{"ast":null,"code":"var _jsxFileName = \"/home/user/Documents/fbw-07-2/SPA/notetaking-application-obinna/src/context/MyProvider.jsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport MyContext from './MyContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MyProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const data = [{\n    colorName: \"red\",\n    colorCode: \"#FF0000\"\n  }, {\n    colorName: \"coral\",\n    colorCode: \"#FF7F50\"\n  }];\n  const [colors, setColors] = useState(data);\n  const [colorState, setColorState] = useState({\n    colorName: \"\",\n    colorCode: \"#ff0080\"\n  });\n  useEffect(() => {\n    const result = JSON.parse(localStorage.getItem(\"colorApp\"));\n\n    if (result !== null) {\n      setColors(result);\n    }\n  }, []);\n\n  const handleChange = event => {\n    setColorState(prevColorState => {\n      return { ...prevColorState,\n        [event.target.name]: event.target.value\n      };\n    });\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    console.log(colorState);\n    setColors(prevColor => prevColor.concat(colorState));\n    localStorage.setItem(\"colorApp\", JSON.stringify(colors));\n    console.log(colors);\n  }; // console.log(filtered)\n  // const addNew = () => {\n  //     setColors(prevColor => {\n  //     })\n  // }\n\n\n  return /*#__PURE__*/_jsxDEV(MyContext.Provider, {\n    value: {\n      colors,\n      setColors,\n      colorState,\n      setColorState,\n      handleChange,\n      handleSubmit\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MyProvider, \"25D1VHhpXfU8678rWVZeLd6VE2E=\");\n\n_c = MyProvider;\nexport default MyProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyProvider\");","map":{"version":3,"sources":["/home/user/Documents/fbw-07-2/SPA/notetaking-application-obinna/src/context/MyProvider.jsx"],"names":["useEffect","useState","MyContext","MyProvider","children","data","colorName","colorCode","colors","setColors","colorState","setColorState","result","JSON","parse","localStorage","getItem","handleChange","event","prevColorState","target","name","value","handleSubmit","preventDefault","console","log","prevColor","concat","setItem","stringify"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,SAAP,MAAsB,aAAtB;;;AAIA,MAAMC,UAAU,GAAG,QAAgB;AAAA;;AAAA,MAAf;AAACC,IAAAA;AAAD,GAAe;AAE/B,QAAMC,IAAI,GAAG,CAAC;AAEVC,IAAAA,SAAS,EAAE,KAFD;AAGVC,IAAAA,SAAS,EAAG;AAHF,GAAD,EAKV;AACCD,IAAAA,SAAS,EAAE,OADZ;AAECC,IAAAA,SAAS,EAAE;AAFZ,GALU,CAAb;AAcA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAuBR,QAAQ,CAACI,IAAD,CAArC;AAEA,QAAM,CAACK,UAAD,EAAaC,aAAb,IAA8BV,QAAQ,CAAC;AAACK,IAAAA,SAAS,EAAC,EAAX;AAAeC,IAAAA,SAAS,EAAE;AAA1B,GAAD,CAA5C;AAEAP,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMY,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAX,CAAf;;AACC,QAAIJ,MAAM,KAAK,IAAf,EAAoB;AAChBH,MAAAA,SAAS,CAACG,MAAD,CAAT;AAAkB;AACvB,GAJK,EAIJ,EAJI,CAAT;;AAQA,QAAMK,YAAY,GAAIC,KAAD,IAAW;AAC5BP,IAAAA,aAAa,CAACQ,cAAc,IAAI;AAC5B,aAAO,EACH,GAAGA,cADA;AAEH,SAACD,KAAK,CAACE,MAAN,CAAaC,IAAd,GAAsBH,KAAK,CAACE,MAAN,CAAaE;AAFhC,OAAP;AAIH,KALY,CAAb;AAOH,GARD;;AAUA,QAAMC,YAAY,GAAIL,KAAD,IAAW;AAC5BA,IAAAA,KAAK,CAACM,cAAN;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYhB,UAAZ;AACAD,IAAAA,SAAS,CAACkB,SAAS,IAAIA,SAAS,CAACC,MAAV,CAAiBlB,UAAjB,CAAd,CAAT;AAGAK,IAAAA,YAAY,CAACc,OAAb,CAAqB,UAArB,EAAiChB,IAAI,CAACiB,SAAL,CAAetB,MAAf,CAAjC;AACAiB,IAAAA,OAAO,CAACC,GAAR,CAAYlB,MAAZ;AAEH,GATD,CAtC+B,CAoD/B;AAGA;AACA;AAEA;AACA;;;AAGF,sBACE,QAAC,SAAD,CAAW,QAAX;AAAoB,IAAA,KAAK,EAAE;AAACA,MAAAA,MAAD;AAASC,MAAAA,SAAT;AAAoBC,MAAAA,UAApB;AAAgCC,MAAAA,aAAhC;AAA+CM,MAAAA,YAA/C;AAA6DM,MAAAA;AAA7D,KAA3B;AAAA,cACKnB;AADL;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAnED;;GAAMD,U;;KAAAA,U;AAqEN,eAAeA,UAAf","sourcesContent":["import { useEffect, useState } from 'react'\nimport MyContext from './MyContext'\n\n\n\nconst MyProvider = ({children}) => {\n    \n    const data = [{\n    \n        colorName: \"red\",\n        colorCode: \t\"#FF0000\",\n        },\n       {\n        colorName: \"coral\",\n        colorCode: \"#FF7F50\",\n        },\n  ]\n \n  \n  \n\n    const [colors, setColors ] = useState(data)\n\n    const [colorState, setColorState] = useState({colorName:\"\", colorCode: \"#ff0080\"})\n\n    useEffect(() => {\n        const result = JSON.parse(localStorage.getItem(\"colorApp\"))\n         if (result !== null){\n             setColors(result)} \n       },[])\n\n      \n\n    const handleChange = (event) => {\n        setColorState(prevColorState => {\n            return {\n                ...prevColorState,\n                [event.target.name] : event.target.value\n            }\n        })\n         \n    }\n\n    const handleSubmit = (event) => {\n        event.preventDefault() \n        console.log(colorState)\n        setColors(prevColor => prevColor.concat(colorState) \n        )\n\n        localStorage.setItem(\"colorApp\", JSON.stringify(colors))\n        console.log(colors)\n       \n    }\n    \n\n\n    \n    // console.log(filtered)\n\n\n    // const addNew = () => {\n    //     setColors(prevColor => {\n\n    //     })\n    // }\n\n\n  return (\n    <MyContext.Provider value={{colors, setColors, colorState, setColorState, handleChange, handleSubmit}} >\n        {children}\n    </MyContext.Provider>\n  )\n}\n\nexport default MyProvider"]},"metadata":{},"sourceType":"module"}